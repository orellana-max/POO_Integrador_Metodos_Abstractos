echo "#POO_Integrador_Metodos_Abstractos" >> README.md 
git init 
git add README.md 
git commit -m "first commit" 
git branch -M main 
git remote add origin https://github.com/orellana-max/POO_Integrador_Metodos_Abstractos.git
 git push -u origin main

EJERCICIO de POO con M√âTODOS ABSTRACTOS üë®‚Äçüë¶ RESUELTO Paso a Paso ‚úÖ

¬°Nada mejor que aprender y afianzar la POO haciendo ejercicios! En esta oportunidad, veremos c√≥mo trabajar con polimorfismo y m√©todos abstractos, mediante el modelado y codificaci√≥n de una empresa que dispone de empleados que cobran sus salarios de diferentes formas. Detectaremos las clases del enunciado y las plasmaremos en UML. Luego, pasaremos tal modelo a un proyecto de Java y lo codificaremos.

Link hacia el enunciado: https://drive.google.com/file/d/1vjpXVOkJNmFsORJnEV5VgOFpWAUjNy9E/view

link al vide: https://youtu.be/gHy4Ls7E49c



EJERCICIO INTEGRADOR DE POO IV

Conceptos aplicados
Clases y Objetos. Estado. Identidad. Comportamiento. Encapsulamiento. Modificadores de acceso.
M√©todos getter/setter. Palabra this. Constructores. M√©todo toString. Miembros est√°ticos.
Enumerados. Principio ‚ÄúTell, don‚Äôt ask‚Äù. Diagrama de clases UML. Relaciones de asociaci√≥n y
dependencia. Listas de objetos con ArrayList. Ciclo For Each. Uso de iteradores. Algoritmos con
colecciones. Herencia. Palabra super. Upcasting. Operador instanceof. Downcasting. Clases
abstractas. Polimorfismo. Sobrescritura de m√©todos. M√©todos abstractos.
Pod√©s aprender todos estos conceptos y m√°s en esta playlist.

Soluci√≥n
El diagrama UML y el proyecto de Java de este ejercicio lo encontrar√°s resuelto en este repositorio.
La explicaci√≥n de c√≥mo llegar a la soluci√≥n de este ejercicio la encontrar√°s en este video.

Enunciado

Cierta empresa requiere una aplicaci√≥n inform√°tica para administrar los datos de su personal, del
cual se conoce: n√∫mero de DNI, nombre, apellido y a√±o de ingreso. Existen dos categor√≠as de
empleados: con salario fijo y a comisi√≥n.
Los empleados a comisi√≥n tienen un salario m√≠nimo, un n√∫mero de clientes captados y un monto a
cobrar por cada cliente captado. El salario se obtiene multiplicando los clientes captados por el
monto por cliente. Si el salario obtenido por los clientes captados no llega a cubrir el salario m√≠nimo,
cobrar√° el salario m√≠nimo.

Los empleados con salario fijo tienen un sueldo b√°sico y un porcentaje adicional en funci√≥n del
n√∫mero de a√±os que llevan la empresa:
‚Ä¢ Menos de 2 a√±os: Nada ‚Ä¢ De 2 a 5 a√±os: 5% m√°s. ‚Ä¢ M√°s de 5 a√±os: 10% m√°s.

Basado en el enunciado descripto, realiz√°:

A) El diagrama de clases que lo modelice, con sus relaciones, atributos y m√©todos.

B) La implementaci√≥n del m√©todo mostrarSalarios que imprima por consola el nombre
completo de cada empleado junto a su salario.

C) La implementaci√≥n del m√©todo empleadoConMasClientes que devuelva al empleado con
mayor cantidad de clientes captados (se supone √∫nico).







